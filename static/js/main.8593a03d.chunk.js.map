{"version":3,"sources":["components/WeatherInfo.js","components/WeatherForm.js","App.js","serviceWorker.js","index.js"],"names":["WeatherInfo","props","console","log","className","error","temperature","city","country","description","humidity","wind_speed","WeatherForm","onSubmit","getWeather","type","name","placeholder","autoFocus","App","state","e","a","async","preventDefault","target","elements","cityValue","value","countryValue","API_URL","fetch","response","json","data","setState","main","temp","weather","wind","speed","sys","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQA0CeA,G,MAxCK,SAAAC,GAEhB,OADAC,QAAQC,IAAIF,GAER,yBAAKG,UAAU,oBAEPH,EAAMI,OACN,yBAAKD,UAAU,oBACX,2BAAIH,EAAMI,QAIdJ,EAAMK,YACF,yBAAKF,UAAU,wBACX,wCACeH,EAAMM,KADrB,KAC6BN,EAAMO,SAEnC,2CACkBP,EAAMK,YADxB,WAC0CL,EAAMQ,aAEhD,wCACeR,EAAMS,SADrB,KAGA,0CACiBT,EAAMU,aAI3B,yBAAKP,UAAU,aACX,uBAAGA,UAAU,sBAAb,uBCCTQ,EA7BK,SAAAX,GAAK,OACrB,yBAAKG,UAAU,QACX,yBAAKA,UAAU,eACX,wBAAIA,UAAU,SAAd,gBAEJ,yBAAKA,UAAU,aACX,0BAAMS,SAAUZ,EAAMa,YAClB,yBAAKV,UAAU,cACX,2BACIW,KAAK,OACLC,KAAK,OACLC,YAAY,YACZb,UAAU,oBACVc,WAAS,IAEb,2BACIH,KAAK,OACLC,KAAK,UACLC,YAAY,eACZb,UAAU,sBAEd,4BAAQA,UAAU,oCAAlB,oBC2CLe,E,2MAxDbC,MAAQ,CACJd,YAAa,GACbG,YAAa,GACbC,SAAU,GACVC,WAAY,EACZJ,KAAM,GACNC,QAAS,GACTH,MAAO,M,EAGXS,WAAa,SAAOO,GAAP,6BAAAC,EAAAC,OAAA,mDACXF,EAAEG,iBADS,EAEeH,EAAEI,OAAOC,SAA3BnB,EAFG,EAEHA,KAAMC,EAFH,EAEGA,QACRmB,EAAYpB,EAAKqB,QACjBC,EAAerB,EAAQoB,SAETD,EANT,wBAOHG,EAPG,4DAO4DH,EAP5D,YAOyEE,EAPzE,mEAAAP,EAAA,MAScS,MAAMD,IATpB,cASHE,EATG,mBAAAV,EAAA,MAUUU,EAASC,QAVnB,QAUHC,EAVG,OAWThC,QAAQC,IAAI,EAAKiB,OAEjB,EAAKe,SAAS,CACZ7B,YAAa4B,EAAKE,KAAKC,KACvB5B,YAAayB,EAAKI,QAAQ,GAAG7B,YAC7BC,SAAUwB,EAAKE,KAAK1B,SACpBC,WAAYuB,EAAKK,KAAKC,MACtBjC,KAAM2B,EAAKlB,KACXR,QAAS0B,EAAKO,IAAIjC,UACjB,kBAAMN,QAAQC,IAAI,EAAKiB,UApBjB,wBAsBT,EAAKe,SAAS,CACZ9B,MAAO,uCAvBA,uC,wEAiCb,OACE,yBAAKD,UAAU,iBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,oBACb,kBAAC,EAAD,CAAaU,WAAY4B,KAAK5B,aAC9B,kBAAC,EAAgB4B,KAAKtB,c,GAlDduB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8593a03d.chunk.js","sourcesContent":["import React from 'react';\n\nconst WeatherInfo = props => {\n    console.log(props);\n    return(\n        <div className=\"card card-header\">\n            {\n                props.error &&\n                <div className=\"alert alert-info\">\n                    <p>{props.error}</p>\n                </div>\n            }\n            {\n                props.temperature ? \n                    <div className=\"card-body text-white\">\n                        <p>\n                            Location: {props.city}, {props.country}\n                        </p>\n                        <p>\n                            Temperature: {props.temperature} Â°C, {props.description}\n                        </p>\n                        <p>\n                            Humidity: {props.humidity}%\n                        </p>\n                        <p>\n                            Wind Speed: {props.wind_speed}\n                        </p>\n                    </div>\n                :\n                    <div className=\"card-body\">\n                        <p className=\"text-white request\">\n                            No request yet.\n                        </p>\n                    </div>    \n            }\n\n           \n\n        </div>\n        \n    )\n}\nexport default WeatherInfo;","import React from 'react';\n\nconst WeatherForm = props => (\n    <div className=\"card\">\n        <div className=\"card-header\">\n            <h1 className=\"title\">Weather App</h1>\n        </div>\n        <div className=\"card-body\">\n            <form onSubmit={props.getWeather}>\n                <div className=\"form-group\">\n                    <input\n                        type=\"text\"\n                        name=\"city\"\n                        placeholder=\"City name\"\n                        className=\"form-control mb-3\"\n                        autoFocus\n                    />\n                    <input\n                        type=\"text\"\n                        name=\"country\"\n                        placeholder=\"Country name\"\n                        className=\"form-control mb-3\"\n                    />\n                    <button className=\"btn btn-warning btn-block button\">\n                        Get weather\n                    </button>\n                </div>\n            </form>\n        </div>    \n    </div>\n)\nexport default WeatherForm;","import React, { Component } from 'react';\nimport './App.css';\n\nimport WeatherInfo from './components/WeatherInfo';\nimport WeatherForm from './components/WeatherForm';\n\n// import { WEATHER_KEY} from './components/keys';\n\nclass App extends Component {\n\n  state = {\n      temperature: '',\n      description: '',\n      humidity: '',\n      wind_speed: 0,\n      city: '',\n      country: '',\n      error: null\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const { city, country } = e.target.elements;\n    const cityValue = city.value;\n    const countryValue = country.value;\n    \n    if (countryValue && cityValue) {\n      const API_URL = `https://api.openweathermap.org/data/2.5/weather?q=${cityValue},${countryValue}&appid=517b832c2d9524251919ce3e541b7a75&units=metric`;\n\n      const response = await fetch(API_URL);\n      const data = await response.json();\n      console.log(this.state)\n\n      this.setState({\n        temperature: data.main.temp,\n        description: data.weather[0].description,\n        humidity: data.main.humidity,\n        wind_speed: data.wind.speed,\n        city: data.name,\n        country: data.sys.country\n      }, () => console.log(this.state));\n    }else{\n      this.setState({\n        error: 'Please, Enter a city and a country'\n      })\n    }\n\n  }\n\n    \n  render(){\n\n \n  return (\n    <div className=\"container p-4\">\n      <div className=\"row\">\n        <div className=\"col-md-4 mx-auto\">\n          <WeatherForm getWeather={this.getWeather}/>\n          <WeatherInfo {...this.state} />\n        </div>\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}